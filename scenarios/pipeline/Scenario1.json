{
	"name": "Scenario1",
	"properties": {
		"activities": [
			{
				"name": "Lookup1_oncontractconfigtable",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select * from dbo.CONTRACTS_CONFIG;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "contract_configtable",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup1_oncontractconfigtable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup1_oncontractconfigtable').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get Metadata1",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DelimitedText1",
									"type": "DatasetReference",
									"parameters": {
										"param_foldername": {
											"value": "@item().SOURCE_PATH",
											"type": "Expression"
										},
										"param_filename": {
											"value": "@item().FILENAME",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Metadata1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('Get Metadata1').output.exists",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Copy data1",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "SnowflakeV2Sink",
												"importSettings": {
													"type": "SnowflakeImportCopyCommand"
												}
											},
											"enableStaging": true,
											"stagingSettings": {
												"linkedServiceName": {
													"referenceName": "Blob_for_snowflake_withSASURL",
													"type": "LinkedServiceReference"
												},
												"path": "destination/staging/contracts"
											}
										},
										"inputs": [
											{
												"referenceName": "DelimitedText1",
												"type": "DatasetReference",
												"parameters": {
													"param_foldername": {
														"value": "@item().SOURCE_PATH",
														"type": "Expression"
													},
													"param_filename": {
														"value": "@item().FILENAME",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "snowflake_dbtarget",
												"type": "DatasetReference",
												"parameters": {
													"param_targettabel": {
														"value": "@item().TARGET_TABLENAME",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}